Виды тестирования |
-------------------
                               -------------------------------------------- 
                               | Сколько находится | Стоимость нахождения |
                               |       ошибок      |        ошибок        |
           --------            |-------------------|----------------------|
          / Expert \           |                   |                      |
         /----------\          |-------------------|----------------------|
        /     UAT    \         |       1%          |         10000$       |
       /--------------\        |-------------------|----------------------|
      /       SIT      \       |       1-3%        |         1000$        |
     /------------------\      |-------------------|----------------------|
    /     System-test    \     |       3-5%        |         100$         |
   /----------------------\    |-------------------|----------------------|
  /    Integration-test    \   |       10%         |         10$          |
 /--------------------------\  |-------------------|----------------------|
/          Unit-test         \ |       60-80%      |         1$           |
------------------------------ --------------------------------------------

* в реальности все наоборот
** выше - функциональное тестирование


AAA - arange, act, assert

Пример unit:
@pytest.test
def test__my_task(a: any) -> None:
    ...
    
Трудозатраты:
Class ~ 35 min
TestClass ~ 45 min

=============================================================================

Отладка (debug):
    - breakpoint
    - print (временные)
    - логирование

Занимает примерно 40%


Code review:
    - 4 eyes ~ парное программирование
    - 6 eyes
    

Анализ:
    - статический (статические анализаторы)
    - динамический (профилирование)
    
    
Помимо функционального тестирования:
    - тестирование производительности
    - тестирование безопасности
    - тесты UI/UX(usability)
    - регрессионное тестирование (отдельный набор тестов) - входит в unit-тестирование
    - Smoke test / Sanity test
    
    
Unit-тесты запускать:
    - commit
    - pull/merge request
    - обновление зависимостей
    - после деплоя vs артефактов
    - локально при изменении кода
    
    
SDET - пишет фреймворки для тестирования (Page Object, Value Object, Builder, ObjectMother)
TestOps 